import streamlit as st
from transformers import GPT2Tokenizer, GPT2LMHeadModel
import torch
import nltk
from nltk.util import ngrams
from nltk.probability import FreqDist
import plotly.express as px
from collections import Counter
from nltk.corpus import stopwords
import string


# Load gpt2 tokenizer and model
tokenizer = GPT2Tokenizer.from_pretrained('gpt2')
model = GPT2LMHeadModel.from_pretrained('gpt2')

def calculate_perplexity(text):
    encoded_input = tokenizer.encode(text, add_special_tokens=False, return_tensors='pt')
    input_ids = encoded_input[0]

    with torch.no_grad():
        outputs = model(input_ids)
        logits = outputs.logits

    perplexity = torch.exp(torch.nn.cross_entropy(logits.view(-1, logits.size(-1)), input_ids.view(-1)))
    return perplexity.item()

def calculate_burstiness(text):
    tokens = nltk.word_tokenize(text.lower())
    word_freq = FreqDist(tokens)
    repeated_count = sum(count > 1 for count in word_freq.values())
    burstiness_score = repeated_count / len(word_freq)
    return burstiness_score


def plot_top_repeated_words(text):
    tokens = text.split()
    stop_words = set(stopwords.words('english'))
    tokens = [token.lower() for token in tokens if token.lower() not in stop_words and token.lower() not in string.punctuation]

    #count
    word_counts = Counter(tokens)
    top_words = word_counts.most_common(10)

    words = [word for word, count in top_words]
    counts = [count for word, count in top_words]

    #plot
    fig = px.bar(x=words, y=counts, labels={'x': 'words', 'y':'counts'}, title='top 10 most repeated words')
    st.plotly_chart(fig, use_container_width=True)

st.set_page_config(layout="wide")
st.title("GPT Shield")

text_area = st.text_area("Enter your text")

if text_area is not None:
    if st.button("Analyze"):


        col1, col2, col3 = st.columns([1, 1, 1])

        with col1:
            st.info("Your input text")
            st.success(text_area)

        with col2:
            st.info("calculated score")
            perplexity = calculate_perplexity(text_area)
            burstiness_score = calculate_burstiness(text_area)

            st.success("Perplexity score: "+perplexity)
            st.success("Burstiness score: "+burstiness_score)

            if perplexity > 30000 and burstiness_score < 0.2:
                st.error("text analysis result: AI generated content")

            else: 
                st.success("Text analysis result: likely not generated by AI")

                st.warning("Disclaimer: AI plagiarism detector apps can assist in identifying potential instances of plagiarism; however, it is important to note that their results may not be entirely flawless or completely reliable. These tools employ advanced algorithms, but they can still produce false positives or false negatives. Therefore, it is recommended to use AI plagiarism detectors as a supplementary tool alongside human judgment and manual verification for accurate and comprehensive plagiarism detection.")

        with col3:
            st.info("Basic Insights")
            plot_top_repeated_words(text_area)